/**
  ******************************************************************************
  * @file    main.c
  * @author  YC
  * @version V1.0
  * @date    2018/08/15
  * @brief   Project 6 - LED commands using Queue management
  ******************************************************************************
*/

#include <string.h>
#include <stdio.h>
#include <stdint.h>
#include "stm32f4xx.h"

#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "timers.h"


// prototypes
static void prevSetupUart(void);
static void preSetupGPIO(void);
static void prvSetupHardware(void);
void printMsg(char *msg);
//void rtos_delay(uint32_t delay_in_ms);
//// vTask2_cmd_handling helper functions
uint8_t getCommandCode(uint8_t *buffer);
uint8_t getArguments(uint8_t *buffer);
//// LED command functions
void led_on(char* task_msg);
void led_off(char* task_msg);
void led_toggle_start(char* task_msg, uint32_t duration);
void led_toggle_stop(char* task_msg);
void led_status_read(char* task_msg);
void rtc_print_date_time(char* task_msg);
void print_error_message(char* task_msg);
//// software timer callback
void led_toggle_callback (TimerHandle_t xTimer);


// UART
char user_msg[250] = {0};
// task handler prototypes
void vTask1_menu_display(void *params);
void vTask2_cmd_handling(void *params);
void vTask3_cmd_processing(void *params);
void vTask4_uart_write(void *params);

// task handles
TaskHandle_t xTaskHandle1 = NULL;
TaskHandle_t xTaskHandle2 = NULL;
TaskHandle_t xTaskHandle3 = NULL;
TaskHandle_t xTaskHandle4 = NULL;

// queue handles
QueueHandle_t command_queue = NULL;
QueueHandle_t uart_write_queue = NULL;

// software timer handles
TimerHandle_t led_timer_handle = NULL;

// Global variable for flags
#define FALSE        0
#define TRUE         1

// command structure
typedef struct APP_CMD {
    uint8_t COMMAND_NUM;
    uint8_t COMMAND_ARGS[10];
}APP_CMD_t;


// for UART2_IRQHandler
uint8_t command_buffer[20];
uint8_t command_len = 0;

// Menu
char menu[] = {"\
\r\nLED_ON             [1] \
\r\nLEN_OFF            [2] \
\r\nLED_TOGGLE_START   [3] \
\r\nLED_TOGGLE_STOP    [4] \
\r\nLED_STATUS_READ    [5] \
\r\nRTC_PRINT_DATETIME [6] \
\r\nEXIT_APP           [0] \
\r\nEnter your option: "};



#define LED_ON_COMMAND                1
#define LED_OFF_COMMAND               2
#define LED_TOGGLE_START_COMMAND      3
#define LED_TOGGLE_STOP_COMMAND       4
#define LED_STATUS_READ_COMMAND       5
#define RTC_PRINT_DATETIME_COMMAND    6


int main(void)
{
    // SEGGER
    DWT->CTRL |= (1 << 0);
    // 1. Reset the RCC clock config to the default reset state.
    // HSI On, PLL Off, system clock = cpu clock = 16MHz
    RCC_DeInit();

    // 2. update the SystemCoreClock variable
    SystemCoreClockUpdate();

    // 3. set up peripherals
    prvSetupHardware();

    // UART
    sprintf(user_msg, "\r\nProject 6 - LED commands using Queue management. \r\n");
    printMsg(user_msg);

    // SEGGER
    SEGGER_SYSVIEW_Conf();
    SEGGER_SYSVIEW_Start();

    // 4. Create Queues
    //// command Queue
    // xQueueCreate(10, sizeof(APP_CMD_t)); // create a queue to contain 10 commands,
                                            // this will consume 10 * 11 bytes = 110 bytes
                                            // in the heap memory of RAM
    command_queue = xQueueCreate(10, sizeof(APP_CMD_t*));
                                            // create a queue to contain 10 command pointers, (better)
                                            // this will consume 10 * 4 bytes = 40 bytes
                                            // in the heap memory of RAM

    uart_write_queue = xQueueCreate(10, sizeof(char*)); // consume 10 * 4 bytes = 40 bytes in heap


    if ((uart_write_queue != NULL) && (command_queue != NULL)) { // RAM memories are allocated for queues successfully
        // 5. Create tasks
        xTaskCreate(
                vTask1_menu_display,
                "Task MENU",
                500, // 500 words
                NULL,
                1, // set this task as lowest task
                &xTaskHandle1
        );

        xTaskCreate(
                vTask2_cmd_handling,
                "Task CMD HANDLING",
                500,
                NULL,
                2,
                &xTaskHandle2
        );

        xTaskCreate(
                vTask3_cmd_processing,
                "Task CMD PROCESSING",
                500,
                NULL,
                2,
                &xTaskHandle3
        );

        xTaskCreate(
                vTask4_uart_write,
                "Task UART WRITE",
                500,
                NULL,
                2,
                &xTaskHandle4
        );

        // 5. Start Scheduler
        vTaskStartScheduler();

    } else {

        sprintf(user_msg, "Queue creation failed.\r\n");
        printMsg(user_msg);

    }






    for(;;);
}


// task implementation
void vTask1_menu_display(void *params) {
// post the menu to uart_write_queue

    char *pMenu = menu;

    while(1) {

        xQueueSend(
                uart_write_queue,
                &pMenu,        // address of pointer which hold our message [NOTE] address of pointer, NOT pointer
                portMAX_DELAY // if queue is full, we wait indefinitely
        );

        // wait here until someone notifies.
        xTaskNotifyWait(
                0,
                0,
                NULL,  // don't care notification value
                portMAX_DELAY // wait indefinitely
        );
    }

}

void vTask2_cmd_handling(void *params) {

    uint8_t command_code = 0;

    APP_CMD_t *new_cmd; // placeholder

    while(1) {

        // block the task and wait until it receive notification
        xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);

        new_cmd = (APP_CMD_t*) pvPortMalloc(sizeof(APP_CMD_t));


        /////////// critical section start ///////////
        taskENTER_CRITICAL();

        // 1. pick code from `command_buffer`
        command_code = getCommandCode(command_buffer); // This line might cause race condition
                                                       // since if user enter new command now,
                                                       // UART interrupt is asynchronous, the `command_code`
                                                       // will not be the first item in the buffer

        new_cmd->COMMAND_NUM = command_code;
        getArguments(new_cmd->COMMAND_ARGS);

        taskEXIT_CRITICAL();
        /////////// critical section end   ///////////

        // 2. send the command to the command queue
        xQueueSend(command_queue, &new_cmd, portMAX_DELAY);
    }

}



void vTask3_cmd_processing(void *params){

    APP_CMD_t *new_cmd; // placeholder

    char task_msg[50]; // created in private stack of task 3 for printing message

    uint32_t  toggle_duration = pdMS_TO_TICKS(50);

    while(1) {

        xQueueReceive(
                command_queue,
                (void*)&new_cmd,
                portMAX_DELAY
        );

        // decode command
        if(new_cmd->COMMAND_NUM == LED_ON_COMMAND) {

            led_on(task_msg);

        }
        else if (new_cmd->COMMAND_NUM == LED_OFF_COMMAND) {

            led_off(task_msg);

        }
        else if (new_cmd->COMMAND_NUM == LED_TOGGLE_START_COMMAND) {

            led_toggle_start(task_msg, toggle_duration);

        }
        else if (new_cmd->COMMAND_NUM == LED_TOGGLE_STOP_COMMAND) {

            led_toggle_stop(task_msg);

        }
        else if (new_cmd->COMMAND_NUM == LED_STATUS_READ_COMMAND) {

            led_status_read(task_msg);

        }
        else if (new_cmd->COMMAND_NUM == RTC_PRINT_DATETIME_COMMAND) {

            rtc_print_date_time(task_msg);

        }
        else {

            print_error_message(task_msg);

        }

        // free memory of new_cmd (pvPortMalloc for new_cmd)
        vPortFree(new_cmd);

    }

}

void vTask4_uart_write(void *params){
// read data from uart_write_queue and print on the UART peripheral

    char *pData = NULL; // a placeholder to keep data

    while(1) {
        // 1. read queue
        xQueueReceive(uart_write_queue, &pData, portMAX_DELAY);
        printMsg(pData);

    }

}


static void prevSetupUart(void) {
    // peripheral related initialization

    // 1. Enable the UART2 and GPIOA Peripheral clock
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);

    // 2.
    // PA2: UART2_TX
    // PA3: UART2_RX
    // Alternate function configuration of MCU pins to behave as UART2 Tx, Rx
    GPIO_InitTypeDef gpio_uart_pins;

    memset(&gpio_uart_pins, 0, sizeof(gpio_uart_pins)); // clear the structure
    gpio_uart_pins.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
    gpio_uart_pins.GPIO_Mode = GPIO_Mode_AF;
    gpio_uart_pins.GPIO_PuPd = GPIO_PuPd_UP; // for idle state
    gpio_uart_pins.GPIO_OType= GPIO_OType_PP;
    gpio_uart_pins.GPIO_Speed = GPIO_High_Speed;

    GPIO_Init(GPIOA, &gpio_uart_pins);

    // 3. AF mode settings for the pins
    GPIO_PinAFConfig(
            GPIOA,            // PA2
            GPIO_PinSource2,  // PA2
            GPIO_AF_USART2
    );
    GPIO_PinAFConfig(
            GPIOA,            // PA3
            GPIO_PinSource3,  // PA3
            GPIO_AF_USART2
    );

    // 4. UART parameter initializations
    USART_InitTypeDef uart2_init;

    memset(&uart2_init, 0, sizeof(uart2_init)); // clear the structure
    uart2_init.USART_BaudRate = 115200;
    uart2_init.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    uart2_init.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
    uart2_init.USART_Parity = USART_Parity_No;
    uart2_init.USART_StopBits = USART_StopBits_1;
    uart2_init.USART_WordLength = USART_WordLength_8b;

    USART_Init(
            USART2,
            &uart2_init
    );

    // 5. Enable the UART byte reception interrupt
    //    reception interrupt will be trigger whenever receive data
    USART_ITConfig(
            USART2,
            USART_IT_RXNE, // Receive Data register not empty interrupt
            ENABLE
    );
    // 6. set the priority in NVIC for UART2 interrupt
    NVIC_SetPriority(USART2_IRQn, 5); // see `configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY` in FreeRTOSConfig.h
                                      // can use 6, 7,..., 15 (lower priority)

    NVIC_EnableIRQ(USART2_IRQn);

    // 7. Enable the UART2 peripheral
    USART_Cmd(USART2, ENABLE);
}

static void preSetupGPIO(void) {

    // 1. Enable AHB1
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE); // for EXTI configuration

    // 2. Initialize GPIO
    GPIO_InitTypeDef led_init,
                     btn_init;

    // led init structure
    led_init.GPIO_Mode  = GPIO_Mode_OUT;
    led_init.GPIO_OType = GPIO_OType_PP;
    led_init.GPIO_Pin   = GPIO_Pin_5;
    led_init.GPIO_PuPd  = GPIO_PuPd_NOPULL;
    led_init.GPIO_Speed = GPIO_Medium_Speed;

    GPIO_Init(GPIOA, &led_init);

    // button init structure
    btn_init.GPIO_Mode  = GPIO_Mode_IN;
    btn_init.GPIO_OType = GPIO_OType_PP; // dummy set for input
    btn_init.GPIO_Pin   = GPIO_Pin_13;
    btn_init.GPIO_PuPd  = GPIO_PuPd_NOPULL;
    btn_init.GPIO_Speed = GPIO_Medium_Speed;

    GPIO_Init(GPIOC, &btn_init);

    //interrupt configuration for the button (PC13)
    //1. system configuration for exti line (SYSCFG settings)
    SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC,EXTI_PinSource13);

    //2. EXTI line configuration 13,falling edge, interrup mode
    EXTI_InitTypeDef exti_init;
    exti_init.EXTI_Line = EXTI_Line13;
    exti_init.EXTI_Mode = EXTI_Mode_Interrupt;
    exti_init.EXTI_Trigger = EXTI_Trigger_Falling;
    exti_init.EXTI_LineCmd = ENABLE;
    EXTI_Init(&exti_init);

    //3. NVIC settings (IRQ settings for the selected EXTI line(13)
    NVIC_SetPriority(EXTI15_10_IRQn,5);
    NVIC_EnableIRQ(EXTI15_10_IRQn);
}

static void prvSetupHardware(void) {
    // setup Button and LED
    preSetupGPIO();
    // setup UART2
    prevSetupUart();
}

void printMsg(char *msg) {

    for(uint32_t i = 0; i < strlen(msg); i++) {

        while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) != SET); // waiting if transmit data register empty flag doesn't set.
        USART_SendData(USART2, msg[i]);

    }

    while(USART_GetFlagStatus(USART2, USART_FLAG_TC) != SET);

}


//void rtos_delay(uint32_t delay_in_ms) {
//
//  uint32_t current_tick_count = xTaskGetTickCount();
//
//  uint32_t delay_in_ticks = (delay_in_ms * configTICK_RATE_HZ) / 1000;
//
//  while( xTaskGetTickCount() < (current_tick_count + delay_in_ticks));
//
//}


void USART2_IRQHandler(void) {
    // This handler will be call whenever MCU receive data
    // Notice that the task related api should use the "fromISR" version

    uint16_t data_byte;

    //
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;

    // 1. Check "Receive data register not empty flag"
    if( USART_GetFlagStatus(USART2, USART_FLAG_RXNE) ) {

        // 2. Picking data in buffer until '\r' comes in.
        data_byte = USART_ReceiveData(USART2);

        command_buffer[command_len++] = (data_byte & 0xFF); // pick the last 8 bits (ASCII)

        if(data_byte == '\r') {

            // finish entering the data
            command_len = 0;

            // 3. Notify the command handling task which held by `xTaskHandle2`
            xTaskNotifyFromISR(xTaskHandle2, 0, eNoAction, &xHigherPriorityTaskWoken);
                                                            // must mention the higher priority task woken flag
                                                            // so if this API unblocks any higher priority task,
                                                            // then this flag will be updated, and yield the
                                                            // higher priority task manually
            // display menu again
            xTaskNotifyFromISR(xTaskHandle1, 0, eNoAction, &xHigherPriorityTaskWoken);
        }

    }

    // 4.
    // if the above FreeRTOS APIs wake up any higher priority task,
    // then yield the processor to the higher priority task which
    // is just woken up
    if(xHigherPriorityTaskWoken) {

        taskYIELD();

    }

}

///////////////////////////////////////
// vTask2_cmd_handling helper functions
uint8_t getCommandCode(uint8_t *buffer) {

    return buffer[0] - 48; // convert first byte of buffer from ASCII to uint8_t

}

uint8_t getArguments(uint8_t *buffer) {
    // do nothing
    return 0;

}

//////////////////////////////////////
// LED command functions
void led_on(char* task_msg) {

    GPIO_WriteBit(GPIOA, GPIO_Pin_5, Bit_SET);

    // print message via uart_write_queue
    sprintf(task_msg, "\r\n>>> LED on\r\n");
	xQueueSend(
			uart_write_queue,
			&task_msg,        // address of pointer which hold our message [NOTE] address of pointer, NOT pointer
			portMAX_DELAY // if queue is full, we wait indefinitely
	);

}

void led_off(char* task_msg) {

    GPIO_WriteBit(GPIOA, GPIO_Pin_5, Bit_RESET);

    // print message via uart_write_queue
    sprintf(task_msg, "\r\n>>> LED off\r\n");
	xQueueSend(
			uart_write_queue,
			&task_msg,        // address of pointer which hold our message [NOTE] address of pointer, NOT pointer
			portMAX_DELAY // if queue is full, we wait indefinitely
	);

}

void led_toggle_callback (TimerHandle_t xTimer) {
    // software timer callback
    GPIO_ToggleBits(GPIOA, GPIO_Pin_5);

}

void led_toggle_start(char* task_msg, uint32_t duration) {

    if(led_timer_handle == NULL) {
        // 1. create software timer
        led_timer_handle = xTimerCreate("LED_Timer", duration, pdTRUE, NULL, led_toggle_callback);
    }

    // 2. start the timer
    xTimerStart(
            led_timer_handle,
            portMAX_DELAY  // if the timer queue is full, wait indefinitely
    );

    // print message via uart_write_queue
	sprintf(task_msg, "\r\n>>> LED is toggling.\r\n");
	xQueueSend(
			uart_write_queue,
			&task_msg,        // address of pointer which hold our message [NOTE] address of pointer, NOT pointer
			portMAX_DELAY // if queue is full, we wait indefinitely
	);

}

void led_toggle_stop(char* task_msg) {

    // stop the timer
	if(led_timer_handle != NULL) {

		xTimerStop(led_timer_handle,portMAX_DELAY);

	}

	// print message via uart_write_queue
	sprintf(task_msg, "\r\n>>> LED toggle stop.\r\n");
	xQueueSend(
			uart_write_queue,
			&task_msg,        // address of pointer which hold our message [NOTE] address of pointer, NOT pointer
			portMAX_DELAY // if queue is full, we wait indefinitely
	);
}

void led_status_read(char* task_msg) {

    uint8_t led_status = GPIO_ReadOutputDataBit(GPIOA, GPIO_Pin_5);

    sprintf(task_msg, "\r\n>>> LED status is %d\r\n", led_status);
    xQueueSend(
            uart_write_queue,
            &task_msg,        // address of pointer which hold our message [NOTE] address of pointer, NOT pointer
            portMAX_DELAY // if queue is full, we wait indefinitely
    );

}

void rtc_print_date_time(char* task_msg) {

    RTC_TimeTypeDef RTC_time;
    RTC_DateTypeDef RTC_date;
    //read time and date from RTC peripheral of the microcontroller
    RTC_GetTime(RTC_Format_BIN, &RTC_time);
    RTC_GetDate(RTC_Format_BIN, &RTC_date);

    sprintf(task_msg,
            "\r\nTime: %02d:%02d:%02d \r\n Date : %02d-%2d-%2d \r\n",
            RTC_time.RTC_Hours,
            RTC_time.RTC_Minutes,
            RTC_time.RTC_Seconds,
            RTC_date.RTC_Date,
            RTC_date.RTC_Month,
            RTC_date.RTC_Year );

    xQueueSend(uart_write_queue, &task_msg, portMAX_DELAY);

}

void print_error_message(char* task_msg) {

    sprintf(task_msg, "\r\nInvalid command received\r\n");
    xQueueSend(
            uart_write_queue,
            &task_msg,        // address of pointer which hold our message [NOTE] address of pointer, NOT pointer
            portMAX_DELAY // if queue is full, we wait indefinitely
    );

}
